# Makefile.in -- Makefile for dict
# Created: Wed Apr 24 14:14:09 1996 by faith@dict.org
# Revised: Sat May  4 21:55:59 2002 by faith@dict.org
# Copyright 1996-2002 Rickard E. Faith (faith@dict.org)
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 1, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.
# 
# $Id: Makefile.in,v 1.59 2002/12/03 19:56:30 cheusov Exp $
#

# Add a _letter_ if you change the version number and release your own version.
# Numbers are for the original author(s) only.
DICT_VERSION=@DICT_VERSION@

ifneq (,)
This makefile requires GNU Make.
endif

.SUFFIXES:	

srcdir=		@srcdir@
VPATH=		@srcdir@
prefix=		@prefix@
subdirs=        @allsubdirs@ regex # doc -- use rfc2229 instead
exec_prefix=	@exec_prefix@
man1_prefix=	@mandir@/man1
man8_prefix=	@mandir@/man8
bindir=         @bindir@
libdir=         @libdir@
libexecdir=     @libexecdir@
sbindir=        @sbindir@
includedir=     @includedir@
datadir=        @datadir@

SHELL=		/bin/sh

USE_PLUGIN=@USE_PLUGIN@

CONF_DIR=@sysconfdir@/
PLUGIN_DIR=${libexecdir}/
DICT_DIR=${datadir}/

CC=		    @CC@
CPP=		@CPP@
AR=         @AR@
RANLIB=		@RANLIB@
INSTALL=	@INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
INSTALL_SCRIPT= @INSTALL_SCRIPT@
INSTALL_DATA=	@INSTALL_DATA@
LEX=		@LEX@
LEXLIB= 	@LEXLIB@
YACC=		@YACC@

CFLAGS=		@CFLAGS@ -DDICT_PLUGIN_PATH=\"$(PLUGIN_DIR)\" -DDICT_DICTIONARY_PATH=\"$(DICT_DIR)\" -DDICT_VERSION=\"$(DICT_VERSION)\" -DDICT_CONFIG_PATH=\"$(CONF_DIR)\"

SCFLAGS=        @SCFLAGS@
LDFLAGS=        @LDFLAGS@
XTRACFLAGS=     @WCFLAGS@ @XTRACFLAGS@ @DEFS@ @CPPFLAGS@ -I. -Iregex
XTRALDFLAGS=    @WLDFLAGS@ @XTRALDFLAGS@
LDLIBS=		@LIBS@ -Lregex -lregex

EXES=	 	dict dictd dictzip dictfmt

ifeq ($(USE_PLUGIN), 1)

	PLUGINS=    
	LIBRARIES=  libdictdplugin.a
	INCLUDES=   dictdplugin.h
all             :: plugins
.PHONY : samples install.samples uninstall.samples
samples         : dictdplugin_exit.so dictdplugin_popen.so man_popen.dict
install.samples : samples
	{ \
    if test ! -d $(libexecdir); then $(INSTALL) -d 755 $(libexecdir); fi; \
    if test ! -d $(datadir); then $(INSTALL) -d 755 $(datadir); fi; \
    $(INSTALL_DATA) dictdplugin_exit.so dictdplugin_popen.so $(libexecdir); \
    $(INSTALL_DATA) man_popen.{dict,index} $(datadir); \
    $(INSTALL_SCRIPT) search_man $(libexecdir); \
    } || true

uninstall.samples :
	rm -f $(datadir)/man_popen.{dict,index} $(libexecdir)/{search_man,dictdplugin_exit.so,dictdplugin_popen.so}

endif

HEADERS= 	./config.h @XTRAHEADERS@ dictzip.h dictd.h dict.h \
                codes.h md5.h utf8_ucs4.h

SRCHOBJS=       index.o data.o utf8_ucs4.o dictdplugin.o
NETOBJS=        daemon.o net.o servscan.o servparse.o md5.o
CLIOBJS=        net.o clientscan.o clientparse.o md5.o

TMPS=           servscan.c servparse.c servparse.h \
		clientscan.c clientparse.c clientparse.h

@SET_MAKE@

all $(EXES)::
	@for subdir in `echo $(subdirs)`; do \
		echo making in $$subdir; \
	 	if [ "$$subdir" = "zlib" ]; then \
			(cd $$subdir \
			&& $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)" libz.a) \
			|| exit 1; \
		elif [ "$$subdir" = "regex" ]; then \
			(cd $$subdir \
			&& $(MAKE) CC="$(CC) $(CFLAGS)" lib) \
			|| exit 1; \
		else \
			(cd $$subdir && $(MAKE)) || exit 1; \
		fi; \
	done

all:: $(EXES) $(LIBRARIES) plugins

%.o: %.c
	$(CC) -c $(XTRACFLAGS) $(CFLAGS) $<

ALLFLAGS=$(XTRACFLAGS) $(CFLAGS) $(XTRALDFLAGS) $(LDFLAGS)
%: %.c
	$(CC) $(ALLFLAGS) -o $@ $< $(OBJS) $(LDLIBS)

$(SRCHOBJS):  $(HEADERS)
$(NETOBJS):  $(HEADERS)
$(CLIOBJS):  $(HEADERS)

dictdplugin_exit.so : libdictdplugin.a

lib%.a : %.o
	$(AR) rc $@ $^

%.so: %.c
	$(CC) $(CFLAGS) $(LDFLAGS) -shared $^ -o $@ libdictdplugin.a
%.so: %.cpp
	$(CXX) $(CFLAGS) $(LDFLAGS) -shared $^ -o $@ libdictdplugin.a

.PHONY: plugins
plugins: $(PLUGINS)

man_popen.dict : dictdplugin-config dictfmt_plugin
	{ \
      echo `dictdplugin-config --plugindir`'/search_man'; \
      echo "qwertyuioplkjhgfdsazxcvbnm 0987654321QWERTYUIOPLKJHGFDSAZXCVBNM"; \
   } | ./dictfmt_plugin dictdplugin_popen.so -s \
      'Example man dict based on example POPEN plugin' man_popen

dict:: dict.c $(HEADERS) $(CLIOBJS)
	$(CC) $(ALLFLAGS) -o $@ $< $(CLIOBJS) $(LDLIBS)

dictd:: dictd.c $(HEADERS) $(NETOBJS) $(SRCHOBJS)
	$(CC) $(ALLFLAGS) -o $@ $< $(NETOBJS) $(SRCHOBJS) $(ZIPOBJS) $(LDLIBS)

dictzip:: dictzip.c $(HEADERS) data.o
	$(CC) $(ALLFLAGS) -o $@ $< data.o $(LDLIBS)

dictfmt:: dictfmt.c $(HEADERS) utf8_ucs4.o
	$(CC) $(ALLFLAGS) -o $@ $< utf8_ucs4.o $(LDLIBS)

servscan.c: servscan.l
	$(LEX) $(LFLAGS) -o$@ $<

servscan.o: servscan.c servparse.o servparse.h $(HEADERS)
	$(CC) -c $(XTRACFLAGS) $(CFLAGS) $(SCFLAGS) $<

servparse.c servparse.h : servparse.y
	$(YACC) -tdv $<; \
    cmp -s y.tab.h servparse.h || mv y.tab.h servparse.h; \
    cmp -s y.tab.c servparse.c || mv y.tab.c servparse.c; \
    rm -f y.tab.h y.tab.c

servparse.o: servparse.c $(HEADERS)
	$(CC) -c $(XTRACFLAGS) $(CFLAGS) $(SCFLAGS) $<

clientscan.c: clientscan.l
	$(LEX) $(LFLAGS) -o$@ $<

clientscan.o: clientscan.c clientparse.o clientparse.h $(HEADERS)
	$(CC) -c $(XTRACFLAGS) $(CFLAGS) $(SCFLAGS) $<

clientparse.c clientparse.h: clientparse.y
	$(YACC) -tdv $<; \
    cmp -s y.tab.h clientparse.h || mv y.tab.h clientparse.h; \
    cmp -s y.tab.c clientparse.c || mv y.tab.c clientparse.c; \
    rm -f y.tab.h y.tab.c

clientparse.o: clientparse.c $(HEADERS)
	$(CC) -c $(XTRACFLAGS) $(CFLAGS) $(SCFLAGS) $<

.PHONY: install.dict install.dictzip install.dictfmt install.dictd \
        install.libs install.includes

install.dict: dict
	if test ! -d $(bindir); then $(INSTALL) -d 755 $(bindir); fi; \
	if test ! -d $(man1_prefix); then $(INSTALL) -d 755 $(man1_prefix); fi; \
	$(INSTALL_PROGRAM) dict $(bindir); \
	$(INSTALL_DATA) dict.1 $(man1_prefix)/dict.1

install.dictzip: dictzip
	if test ! -d $(bindir); then $(INSTALL) -d 755 $(bindir); fi; \
	if test ! -d $(man1_prefix); then $(INSTALL) -d 755 $(man1_prefix); fi; \
	$(INSTALL_PROGRAM) dictzip $(bindir); \
	$(INSTALL_DATA) dictzip.1 $(man1_prefix)/dictzip.1

install.dictfmt: dictfmt dictfmt_index2word dictfmt_index2suffix dictfmt_plugin
	if test ! -d $(bindir); then $(INSTALL) -d 755 $(bindir); fi; \
	if test ! -d $(man1_prefix); then $(INSTALL) -d 755 $(man1_prefix); fi; \
	$(INSTALL_PROGRAM) dictfmt $(bindir); \
	$(INSTALL_SCRIPT) dictfmt_index2suffix $(bindir); \
	$(INSTALL_SCRIPT) dictfmt_index2word $(bindir); \
	$(INSTALL_SCRIPT) dictfmt_virtual $(bindir); \
	$(INSTALL_DATA) dictfmt.1 $(man1_prefix)/dictfmt.1; \
	test _$(USE_PLUGIN) = _1 && \
	    $(INSTALL_SCRIPT) dictfmt_plugin $(bindir) || true

install.dictd: dictd
	if test ! -d $(sbindir); then $(INSTALL) -d 755 $(sbindir); fi; \
	if test ! -d $(man8_prefix); then install -d 755 $(man8_prefix); fi; \
	$(INSTALL_PROGRAM) dictd $(sbindir); \
	$(INSTALL_DATA) dictd.8 $(man8_prefix)/dictd.8

install.libs: $(LIBRARIES)
	test _$(USE_PLUGIN) = _1 && \
	{ if test ! -d $(libdir); then $(INSTALL) -d 755 $(libdir); fi; \
	$(INSTALL_DATA) $(LIBRARIES) $(libdir); } || true

install.includes:
	test _$(USE_PLUGIN) = _1 && \
	{ if test ! -d $(includedir); then $(INSTALL) -d 755 $(includedir); fi; \
    $(INSTALL_DATA) $(INCLUDES) $(includedir); } || true

install.plugins:
	test _$(USE_PLUGIN) = _1 && \
	{ if test ! -d $(libexecdir); then $(INSTALL) -d 755 $(libexecdir); fi; \
    $(INSTALL_DATA) $(PLUGINS) $(libexecdir); } || true

.PHONY: install

install: \
install.dict install.dictzip install.dictd install.dictfmt \
install.libs install.includes install.plugins
ifeq ($(USE_PLUGIN), 1)
	$(INSTALL_SCRIPT) dictdplugin-config $(bindir)
endif

.PHONY: uninstall.dict uninstall.dictzip uninstall.dictfmt uninstall.dictd \
        uninstall.libs uninstall.includes

uninstall.dict:
	rm -f $(bindir)/dict $(man1_prefix)/dict.1

uninstall.dictzip:
	rm -f $(bindir)/dictzip $(man1_prefix)/dictzip.1

uninstall.dictd:
	rm -f $(sbindir)/dictd $(man8_prefix)/dictd.8

uninstall.dictfmt:
	rm -f $(bindir)/dictfmt $(man1_prefix)/dictfmt.1 \
	$(bindir)/dictfmt_index2suffix \
	$(bindir)/dictfmt_index2word \
	$(bindir)/dictfmt_virtual; \
	test _$(USE_PLUGIN) = _1 && rm -f $(bindir)/dictfmt_plugin || true

uninstall.includes:
ifeq ($(USE_PLUGIN), 1)
	rm -f $(addprefix $(includedir)/, $(INCLUDES))
endif

uninstall.libs:
ifeq ($(USE_PLUGIN), 1)
	rm -f $(addprefix $(libdir)/, $(LIBRARIES))
endif

uninstall.plugins:
ifeq ($(USE_PLUGIN), 1)
	rm -f $(addprefix $(libexecdir), $(PLUGINS))
endif

.PHONY: uninstall

uninstall: \
uninstall.dict uninstall.dictd uninstall.dictfmt uninstall.dictzip \
uninstall.libs uninstall.includes uninstall.plugins
ifeq ($(USE_PLUGIN), 1)
	rm -f $(bindir)/dictdplugin-config
endif

.PHONY: ChangeLog
ChangeLog:
	@(echo "***** Making new ChangeLog..."; \
	rm -f ChangeLog; \
	AWK=@AWK@ rcs2log -i 2 -r -d'1996-09-20<' . doc regex zlib libmaa \
	| sed 's,/cvsroot/dict/dictd1/,,g; \
	       s,/cvs/dict/dictd1/,,g;\
           s/cheusov@[^>]*/vle@gmx.net/g;\
	       s,faith@[^>]*,faith@dict.org,g;\
	       s,hilliard...hilliard@.*,Bob Hilliard  <hilliard@debian.org>,g; \
	       s,tek...tek@.*,Julian Squires  <tek@wiw.org>,g' \
	> ChangeLog;)


dist: ChangeLog
	@( CVSROOT=`cat CVS/Root`; \
	export CVSROOT; \
	VERSION=$(DICT_VERSION) ; \
	export VERSION; \
	echo "***** Copying ChangeLog for dictd-$${VERSION}..."; \
	cp ChangeLog /tmp; \
	echo "***** Exporting files for dictd-$${VERSION}..."; \
	cd /tmp; \
	rm -rf /tmp/dictd-$${VERSION}; \
	cvs export -fd dictd-$${VERSION} -r HEAD dictd1; \
	cd dictd-$${VERSION}; \
	make -f Makefile.conf; \
	mv ../ChangeLog .; \
	chmod -R a+rX,g-w .; \
	cd ..; \
	echo "***** Taring and zipping dictd-$${VERSION}.tar.gz..."; \
	tar cvvf dictd-$${VERSION}.tar dictd-$${VERSION}; \
	gzip -9f dictd-$${VERSION}.tar; \
	echo "***** Done making /tmp/dictd-$${VERSION}.tar.gz")

.PHONY: clean distclean tags
clean:
	-rm -f *.o *.a *.so *.s *~ core a.out config.log $(EXES) $(TMPS)
	-rm -f *.log *.aux *.toc *.dvi *.ps
	-rm -f *.cfg *.dtk .inslog tca.map
	-rm -f *.dct *.idx y.output TAGS
	-rm -f *.dict *.index

recursive-clean: clean
	@for subdir in `echo $(subdirs)`; do \
		echo making clean in $$subdir; \
		(cd $$subdir && $(MAKE) clean) || exit 1; \
	done

distclean: recursive-clean
	@for subdir in `echo $(subdirs)`; do \
	 	if [ "$$subdir" != "zlib" ]; then \
			if [ "$$subdir" = "regex" ]; then \
				echo making clean in $$subdir; \
				(cd $$subdir && $(MAKE) clean) || exit 1; \
			else \
				echo making $@ in $$subdir; \
				(cd $$subdir && $(MAKE) $@) || exit 1; \
			fi \
		fi \
	done; \
	rm -f regex/regex.h; \
	rm -f config.h config.cache config.status stamp-h.in stamp-h; \
	rm -f Makefile doc/Makefile dictdplugin-config

cvsclean: distclean
	-rm -f configure libmaa/configure

tags:
	etags *.[ch]


# The following is based on the "Automatic Remaking" node in the GNU
# Autoconf documentation:

$(srcdir)/configure: configure.in
	cd $(srcdir) && autoconf

# autoheader might not change config.h.in, so touch a stamp file.
${srcdir}/config.h.in: stamp-h.in
${srcdir}/stamp-h.in: configure.in
	cd ${srcdir} && autoheader
	date > ${srcdir}/stamp-h.in

config.h: stamp-h
stamp-h: config.h.in config.status
	./config.status

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

